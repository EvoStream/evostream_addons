configuration=
{
	daemon=false,
	instancesCount=-1,
	pathSeparator="/",
	logAppenders=
	{
		{
			name="console appender",
			type="coloredConsole",
			level=6
		},
		{
			name="file appender",
			type="file",
			level=6,
			fileName="/var/log/evostreamms/evostreamms",
			newLineCharacters="\n",
			fileHistorySize=100,
			fileLength=1024*1024,
			singleLine=true
		},
	},
	applications=
	{
		rootDirectory="./",
		{
			appDir="./",
			name="evostreamms",
			description="EVOSTREAM MEDIA SERVER",
			protocol="dynamiclinklibrary",
			default=true,
			pushPullPersistenceFile="/var/evostreamms/xml/pushPullSetup.xml",
			authPersistenceFile="/var/evostreamms/xml/auth.xml",
			connectionsLimitPersistenceFile="/var/evostreamms/xml/connlimits.xml",
			bandwidthLimitPersistenceFile="/var/evostreamms/xml/bandwidthlimits.xml",
			ingestPointsPersistenceFile="/var/evostreamms/xml/ingestpoints.xml",
			streamsExpireTimer=10,
			rtcpDetectionInterval=15,
			hasStreamAliases=false,
			hasIngestPoints=false,
			validateHandshake=false,
			aliases={"er", "live", "vod"},
			maxRtmpOutBuffer=512*1024,
			hlsVersion=3,
			useSourcePts=false,
			enableCheckBandwidth=true,
			vodRedirectRtmpIp="",
			forceRtmpDatarate=false,
			mediaStorage = {
				recordedStreamsStorage="/var/evostreamms/media",
				{
					description="Default media storage",
					mediaFolder="/var/evostreamms/media",
				},
				--[[
				-- the following is an example and contains all
				-- available properties along with their default
				-- values(except paths, of course)
				sample={
					description="Storage example",
					mediaFolder="/some/media/folder",
					metaFolder="/fast/discardable/separate/folder",
					enableStats=false,
					clientSideBuffer=15,
					keyframeSeek=true,
					seekGranularity=0.1,
					externalSeekGenerator=false,
				}
				]]--
			},
			acceptors=
			{
				-- CLI acceptors
				{
					ip="127.0.0.1",
					port=1112,
					protocol="inboundJsonCli",
					useLengthPadding=true
				},
				{
					ip="127.0.0.1",
					port=7777,
					protocol="inboundHttpJsonCli"
				},
				{
					ip="127.0.0.1",
					port=1222,
					protocol="inboundAsciiCli",
					useLengthPadding=true
				},

				-- RTMP and clustering
				{
					ip="0.0.0.0",
					port=1935,
					protocol="inboundRtmp",
				},
				{
					ip="127.0.0.1",
					port=1936,
					protocol="inboundRtmp",
					clustering=true
				},
				{
					ip="127.0.0.1",
					port=1113,
					protocol="inboundBinVariant",
					clustering=true
				},

				-- RTSP
				{
					ip="0.0.0.0",
					port=5544,
					protocol="inboundRtsp",
					--[[
					multicast=
					{
						ip="224.2.1.39",
						ttl=127,
					}
					]]--
				},

				-- LiveFLV ingest
				{
					ip="0.0.0.0",
					port=6666,
					protocol="inboundLiveFlv",
					waitForMetadata=true,
				},

				--[[
				-- Inbound TCP TS
				{
					ip="0.0.0.0",
					port=9999,
					protocol="inboundTcpTs",
				},

				-- Inbound UDP TS
				{
					ip="0.0.0.0",
					port=9999,
					protocol="inboundUdpTs",
				},
				]]--

				-- HTTP
				{
					ip="0.0.0.0",
					port=8080,
					protocol="inboundHttp",
				},

				--RTMPS
				--[[
				{
					ip="0.0.0.0",
					port=4443,
					protocol="inboundRtmp",
					-- cipherSuite="!DEFAULT:RC4-SHA", -- enables/disables a specific set of ciphers. If not specified, it is defaulted to the openssl collection of ciphers
					sslKey="/path/to/some/key",
					sslCert="/path/to/some/cert",
				},
				]]--
				-- JSONMETA
				{
					ip="0.0.0.0",
					port=8100,
					--streamname="test",
					protocol="inboundJsonMeta",
				},
				-- WebSockets JSON Metadata
				{
					ip="0.0.0.0",
					port=8210,
					protocol="wsJsonMeta",
					-- streamname="~0~0~0~"
				},
				-- WebSockets FMP4 Fetch
				{
					ip="0.0.0.0",
					port=8410,
					protocol="inboundWSFMP4"
				},
			},
			--[[
			autoDASH=
			{
				targetFolder= "/var/evo-webroot",
			},
			autoHLS=
			{
				targetFolder= "/var/evo-webroot",
			},
			autoHDS=
			{
				targetFolder= "/var/evo-webroot",
			},
			autoMSS=
			{
				targetFolder= "/var/evo-webroot",
			},
			]]--
			--[[
			authentication=
			{
				rtmp=
				{
					type="adobe",
					encoderAgents=
					{
						"FMLE/3.0 (compatible; FMSc/1.0)",
						"Wirecast/FM 1.0 (compatible; FMSc/1.0)",
						"EvoStream Media Server (www.evostream.com)"
					},
					usersFile="/etc/evostreamms/users.lua"
				},
				rtsp=
				{
					usersFile="/etc/evostreamms/users.lua",
					--authenticatePlay=false,
				}
			},
			]]--
			eventLogger=
			{
				-- the following customData node will be appended to all outgoing
				-- events generated by this logger.
				--customData=123,
				sinks=
				{
					--[=[
					{
						type="file",
						-- the following customData node will be apended to all
						-- events generated by this sink. It overwrides the
						-- customData node defined on the upper level. It can
						-- also be a complex structure like this
						--[[
						customData =
						{
							some="string",
							number=123.456,
							array={1, 2.345, "Hello world", true, nil}
						},
						]]--
						filename="/var/log/evostreamms/events.txt",
						format="text",
						--format="xml",
						--format="json",
						--format="w3c",
						--[[
						timestamp=true,
						appendTimestamp=true,
						appendInstance=true,
						fileChunkLength=43200, -- 12 hours (in seconds)
						fileChunkTime="18:00:00",
						]]--
						enabledEvents=
						{
							"serverStarted",
							"serverStopping",
							"inStreamCreated",
							"outStreamCreated",

							--[[
							"streamCreated",
							"inStreamCodecsUpdated",
							"outStreamCodecsUpdated",
							"streamCodecsUpdated",
							"inStreamClosed",
							"outStreamClosed",
							"streamClosed",
							"cliRequest",
							"cliResponse",
							"applicationStart",
							"applicationStop",
							"carrierCreated",
							"carrierClosed",
							"protocolRegisteredToApp",
							"protocolUnregisteredFromApp",
							"processStarted",
							"processStopped",
							"timerCreated",
							"timerTriggered",
							"timerClosed",
							"hlsChunkCreated",
							"hlsChunkClosed",
							"hlsChunkError",
							"hlsChildPlaylistUpdated",
							"hlsMasterPlaylistUpdated",
							"hdsChunkCreated",
							"hdsChunkClosed",
							"hdsChunkError",
							"hdsChildPlaylistUpdated",
							"hdsMasterPlaylistUpdated",
							"mssChunkCreated",
							"mssChunkClosed",
							"mssChunkError",
							"mssPlaylistUpdated",
							"recordChunkCreated",
							"recordChunkClosed",
							"recordChunkError",
							"audioFeedStopped",
							"videoFeedStopped",
							"playlistItemStart",
							"firstPlaylistItemStart",
							"lastPlaylistItemStart",
							"streamingSessionStarted",
							"streamingSessionEnded",
							"mediaFileDownloaded",
							"webRTCStarted",
							"webRTCStopped",
							"webRTCPeerConnectionCreated",
							"webRTCPeerConnectionClosed",
							"webRTCPeerStreamStarted",
							"webRTCPeerStreamClosed"
							"WSStreamStarted",
							"WSStreamClosed",
							]]--
						},
					},
					]=]--
					{
						type="RPC",
						-- IMPORTANT!!!
						-- To set the url below, match the webconfig.lua's ip and port settings
						--    port=8888,
						--    bindToIP="", -- used for binding to a particular IP
						--                    used in cases where a machine has multiple ethernet interfaces
						-- If using a single ethernet interface, use the localhost ip (not loopback);
						-- otherwise, use what is defined in bindToIP
						-- url="http://evo-albsm.brazilsouth.cloudapp.azure.com:8888/evowebservices/evowebservices.php",
						url="http://191.235.94.48:4000/evowebservices/",
						serializerType="JSON",
						-- serializerType="XML"
						-- serializerType="XMLRPC"
						enabledEvents=
						{  --These are the events sent by default and tend to be the most commonly used
							"serverStarted",
							"serverStopping",
							"inStreamCreated",
							"inStreamClosed",

							--[[ A list of additional events that can be sent
							"outStreamCreated",
							"outStreamClosed",
							"streamingSessionStarted",
							"streamingSessionEnded",
							"recordChunkClosed",
							"hlsChunkClosed",
							"streamCreated",
							"inStreamCodecsUpdated",
							"outStreamCodecsUpdated",
							"streamCodecsUpdated",
							"streamClosed",
							"cliRequest",
							"cliResponse",
							"applicationStart",
							"applicationStop",
							"carrierCreated",
							"carrierClosed",
							"serverStarted",
							"serverStopping",
							"protocolRegisteredToApp",
							"protocolUnregisteredFromApp",
							"processStarted",
							"processStopped",
							"timerCreated",
							"timerTriggered",
							"timerClosed",
							"hlsChunkCreated",
							"hlsChunkClosed",
							"hlsChunkError",
							"hlsChildPlaylistUpdated",
							"hlsMasterPlaylistUpdated",
							"hdsChunkCreated",
							"hdsChunkClosed",
							"hdsChunkError",
							"hdsChildPlaylistUpdated",
							"hdsMasterPlaylistUpdated",
							"dashChunkCreated",
							"dashChunkClosed",
							"dashChunkError",
							"dashPlaylistUpdated",
							"mssChunkCreated",
							"mssChunkClosed",
							"mssChunkError",
							"mssPlaylistUpdated",
							"recordChunkCreated",
							"recordChunkClosed",
							"recordChunkError",
							"audioFeedStopped",
							"videoFeedStopped",
							"playlistItemStart",
							"firstPlaylistItemStart",
							"lastPlaylistItemStart",
							"mediaFileDownloaded",
							"webRTCStarted",
							"webRTCStopped",
							"webRTCPeerConnectionCreated",
							"webRTCPeerConnectionClosed",
							"webRTCPeerStreamStarted",
							"webRTCPeerStreamClosed",
							"WSStreamStarted",
							"WSStreamClosed",
							]]--
						},
					},
				},
			},
			transcoder = {
				scriptPath="/usr/bin/emsTranscoder.sh",
				srcUriPrefix="rtsp://localhost:5544/",
				dstUriPrefix="-f flv tcp://localhost:6666/"
			},
			mp4BinPath="/usr/bin/evo-mp4writer",
			--WebRTC
			webrtc = {
				sslKey="/etc/evostreamms/server.key",
				sslCert="/etc/evostreamms/server.cert",
			},
			--[[
			drm={
				type="verimatrix",
				requestTimer=1,
				reserveKeys=10,
				reserveIds=10,
				-- urlPrefix="http://server1.evostream1.com:12684/CAB/keyfile"
				urlPrefix="http://vcas3multicas1.verimatrix.com:12684/CAB/keyfile"
			},
			]]--
		},
	}
}
